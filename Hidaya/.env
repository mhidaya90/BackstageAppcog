Bitrisetoke=rbp9uA9-UOqSJu3FUo-Zz4Obhz-5alqscNG2EoUL-z_7FSO0gH_LN5iA4PrqIolXPdSRB4NwrX3Ik6o83b1QBg


import React, { useEffect, useState } from 'react';
import { useApi, fetchApiRef } from '@backstage/core-plugin-api';
import { Card, CardContent, Typography, List, ListItem, CircularProgress } from '@material-ui/core';

export const BitriseBuildsCard = () => {
  const fetchApi = useApi(fetchApiRef);
  const [builds, setBuilds] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchBuilds = async () => {
      try {
        const response = await fetchApi.fetch('/bitrise/apps/{app-slug}/builds');
        if (!response.ok) {
          const text = await response.text();
          throw new Error(`Failed to fetch builds: ${response.status} - ${text}`);
        }
        const data = await response.json();
        setBuilds(data.data); // Bitrise wraps builds in `data`
      } catch (err: any) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchBuilds();
  }, [fetchApi]);

  if (loading) return <CircularProgress />;
  if (error) return <Typography color="error">Error: {error}</Typography>;

  return (
    <Card>
      <CardContent>
        <Typography variant="h6">Recent Bitrise Builds</Typography>
        <List>
          {builds.map(build => (
            <ListItem key={build.slug}>
              {build.status_text} - {new Date(build.triggered_at).toLocaleString()}
            </ListItem>
          ))}
        </List>
      </CardContent>
    </Card>
  );
};

