import { coreServices } from '@backstage/backend-plugin-api';
import { catalogServiceRef } from '@backstage/plugin-catalog-node';
import { createBackendPlugin } from '@backstage/backend-plugin-api';
import { createRouter } from './router';
import { bitriseService } from './services/BitriseService';

jest.mock('./router', () => ({
  createRouter: jest.fn().mockResolvedValue('mockRouter'),
}));

jest.mock('./services/BitriseService', () => ({
  bitriseService: jest.fn().mockImplementation(() => ({
    getBuild: jest.fn(),
  })),
}));

describe('flowsourceBitrisePlugin', () => {
  it('should register and initialize the plugin correctly', async () => {
    const registerInitMock = jest.fn();
    const env = { registerInit: registerInitMock };

    const plugin = createBackendPlugin({
      pluginId: 'flowsource-bitrise',
      register(env) {
        env.registerInit({
          deps: {
            logger: coreServices.logger,
            httpRouter: coreServices.httpRouter,
            catalog: catalogServiceRef,
          },
          async init({ httpRouter }) {
            const bitriseServiceInstance = new bitriseService('fake-token');
            const router = await createRouter({ bitriseService: bitriseServiceInstance });
            httpRouter.use(router);
          },
        });
      },
    });

    // Simulate plugin registration
    plugin.register(env);

    expect(registerInitMock).toHaveBeenCalled();
    const initConfig = registerInitMock.mock.calls[0][0];
    expect(initConfig.deps).toHaveProperty('logger');
    expect(initConfig.deps).toHaveProperty('httpRouter');
    expect(initConfig.deps).toHaveProperty('catalog');

    const httpRouterMock = { use: jest.fn() };
    await initConfig.init({ httpRouter: httpRouterMock });

    expect(createRouter).toHaveBeenCalled();
    expect(httpRouterMock.use).toHaveBeenCalledWith('mockRouter');
  });
});
