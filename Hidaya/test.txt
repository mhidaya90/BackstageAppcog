import { flowsourceBitrisePlugin } from './plugin';
import { createRouter } from './router';
import { coreServices } from '@backstage/backend-plugin-api';
import { catalogServiceRef } from '@backstage/plugin-catalog-node';

jest.mock('./router', () => ({
  createRouter: jest.fn().mockResolvedValue('mockRouter'),
}));

const mockUse = jest.fn();
const mockRegisterInit = jest.fn();
const mockLogger = {};
const mockCatalog = {};

const mockEnv = {
  registerInit: mockRegisterInit,
};

describe('flowsourceBitrisePlugin', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should register and initialize the plugin correctly', async () => {
    const plugin = flowsourceBitrisePlugin;

    plugin.register(mockEnv as any);

    expect(mockRegisterInit).toHaveBeenCalledWith(
      expect.objectContaining({
        deps: expect.objectContaining({
          logger: coreServices.logger,
          httpRouter: coreServices.httpRouter,
          catalog: catalogServiceRef,
        }),
        init: expect.any(Function),
      }),
    );

    const initFn = mockRegisterInit.mock.calls[0][0].init;

    process.env.BITRISE_AUTH_TOKEN = 'dummy-token';

    const mockHttpRouter = { use: mockUse };
    await initFn({ httpRouter: mockHttpRouter });

    expect(createRouter).toHaveBeenCalledWith({
      bitriseService: expect.any(Object),
    });

    expect(mockUse).toHaveBeenCalledWith('mockRouter');
  });
});
