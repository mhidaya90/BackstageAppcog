import request from 'supertest';
import express from 'express';
import { createRouter } from './plugin'; // Adjust the path if needed

describe('Bitrise Router', () => {
  let app;
  const mockBitriseService = {
    getBuild: jest.fn(),
    getApps: jest.fn(),
  };

  beforeAll(async () => {
    const router = await createRouter({ bitriseService: mockBitriseService });
    app = express().use(router);
  });

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('GET /build/:appSlug should return build info', async () => {
    const mockBuild = { id: '123', status: 'success' };
    mockBitriseService.getBuild.mockResolvedValue(mockBuild);

    const response = await request(app).get('/build/test-app');

    expect(response.status).toBe(200);
    expect(response.body).toEqual(mockBuild);
    expect(mockBitriseService.getBuild).toHaveBeenCalledWith('test-app');
  });

  it('GET /apps should return app list', async () => {
    const mockApps = [{ slug: 'app1', title: 'App One' }];
    mockBitriseService.getApps.mockResolvedValue(mockApps);

    const response = await request(app).get('/apps');

    expect(response.status).toBe(200);
    expect(response.body).toEqual(mockApps);
    expect(mockBitriseService.getApps).toHaveBeenCalled();
  });

  it('GET /build/:appSlug should handle errors', async () => {
    mockBitriseService.getBuild.mockRejectedValue(new Error('Failed to fetch build'));

    const response = await request(app).get('/build/test-app');

    expect(response.status).toBe(500);
    expect(response.body).toHaveProperty('error');
  });

  it('GET /apps should handle errors', async () => {
    mockBitriseService.getApps.mockRejectedValue(new Error('Failed to fetch apps'));

    const response = await request(app).get('/apps');

    expect(response.status).toBe(500);
    expect(response.body).toHaveProperty('error');
  });
});
