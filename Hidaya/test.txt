import { flowsourceBitrisePlugin } from './plugin';
import { coreServices } from '@backstage/backend-plugin-api';
import { catalogServiceRef } from '@backstage/plugin-catalog-node';
import { bitriseService } from './services/BitriseService';
import { createRouter } from './router';

jest.mock('./services/BitriseService');
jest.mock('./router');

describe('flowsourceBitrisePlugin', () => {
  it('should register and initialize the plugin correctly', async () => {
    const useMock = jest.fn();
    const httpRouterMock = { use: useMock };
    const loggerMock = {};
    const registerInitMock = jest.fn();

    const env = {
      registerInit: registerInitMock,
    };

    // Simulate plugin registration
    flowsourceBitrisePlugin.register(env);

    // Verify registerInit was called
    expect(registerInitMock).toHaveBeenCalled();

    const initConfig = registerInitMock.mock.calls[0][0];
    expect(initConfig.deps).toHaveProperty('logger');
    expect(initConfig.deps).toHaveProperty('httpRouter');
    expect(initConfig.deps).toHaveProperty('catalog');

    // Simulate init function
    (createRouter as jest.Mock).mockResolvedValue(httpRouterMock);
    await initConfig.init({ httpRouter: httpRouterMock });

    expect(createRouter).toHaveBeenCalled();
    expect(useMock).toHaveBeenCalled();
  });
});
