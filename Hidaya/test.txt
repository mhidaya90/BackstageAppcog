import { flowsourceBitrisePlugin } from './plugin';
import { coreServices } from '@backstage/backend-plugin-api';
import { catalogServiceRef } from '@backstage/plugin-catalog-node';
import { createRouter } from './router';
import { bitriseService } from './services/BitriseService';

jest.mock('./router', () => ({
  createRouter: jest.fn().mockResolvedValue('mockRouter'),
}));

jest.mock('./services/BitriseService', () => ({
  bitriseService: jest.fn().mockImplementation(() => ({
    getBuild: jest.fn(),
  })),
}));

describe('flowsourceBitrisePlugin', () => {
  it('should register and initialize the plugin correctly', async () => {
    const registerInitMock = jest.fn();

    const env = {
      registerInit: registerInitMock,
    };

    // Invoke the plugin function to simulate registration
    flowsourceBitrisePlugin.register(env);

    expect(registerInitMock).toHaveBeenCalled();

    const initConfig = registerInitMock.mock.calls[0][0];
    expect(initConfig.deps).toHaveProperty('logger');
    expect(initConfig.deps).toHaveProperty('httpRouter');
    expect(initConfig.deps).toHaveProperty('catalog');

    const mockHttpRouter = {
      use: jest.fn(),
    };

    await initConfig.init({ httpRouter: mockHttpRouter });

    expect(createRouter).toHaveBeenCalled();
    expect(mockHttpRouter.use).toHaveBeenCalledWith('mockRouter');
  });
});
