
import { HttpAuthService, BackstageCredentials, BackstageUserIdentity } from '@backstage/backend-plugin-api';
import { InputError } from '@backstage/errors';
import { z } from 'zod';
import express from 'express';
import Router from 'express-promise-router';
import { TodoListService } from './services/TodoListService/types';
import { BitriseServiceType } from './services/BitriseService/types';

export async function createRouter({
  httpAuth,
  todoListService,
  bitriseService,
}: {
  httpAuth: HttpAuthService;
  todoListService: TodoListService;
  bitriseService: BitriseServiceType;
}): Promise<express.Router> {
  const router = Router();
  router.use(express.json());

  const todoSchema = z.object({
    title: z.string(),
    entityRef: z.string().optional(),
  });

  router.post('/todos', async (req, res) => {
    const parsed = todoSchema.safeParse(req.body);
    if (!parsed.success) {
      throw new InputError(parsed.error.toString());
    }

    const mockCredentials: BackstageCredentials<BackstageUserIdentity> = {
      identity: {
        type: 'user',
        ownershipEntityRefs: ['user:default/local-test-user'],
        userEntityRef: 'user:default/local-test-user',
      },
    };

    const result = await todoListService.createTodo(parsed.data, {
      credentials: mockCredentials,
    });

    res.status(201).json(result);
  });

  router.get('/todos', async (_req, res) => {
    res.json(await todoListService.listTodos());
  });

  router.get('/todos/:id', async (req, res) => {
    res.json(await todoListService.getTodo({ id: req.params.id }));
  });

  router.get('/bitrise/build/:appSlug', async (req, res) => {
    const { appSlug } = req.params;
    const build = await bitriseService.getBuild(appSlug);
    res.json(build);
  });

  return router;
}
